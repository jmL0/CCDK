#ifndef _CHAR_H_
#define _CHAR_H_

typedef enum {
    PRIO_CHAR = 20, 
} PRIORITY;


class Char : public Prop2D {
public:
    CATEGORY category;
    int step_cnt;
    double clean_at;
    int client_id, internal_id; // Used to track props generated by remote game servers

    Char( CATEGORY cat, Vec2 lc, TileDeck *dk, Layer *tgtlayer, int client_id=0, int internal_id=0 );

    Vec2 calcNextLoc( Vec2 from, Vec2 nextloc, float body_size, bool enemy, bool flying, bool swimming, BLOCKTYPE bt_can_enter );
    void selectByCategory( Vec2 center, float dia, CATEGORY cat, Char *out[], int *outlen );
    static Char *getNearestByCategory( Vec2 from, CATEGORY cat, Char *except );
    inline bool hit( Prop2D *p, float sz ) {
        return ( loc.x + sz > p->loc.x - sz ) && ( loc.y + sz > p->loc.y - sz ) &&
            ( loc.x - sz < p->loc.x + sz ) && ( loc.y - sz < p->loc.y + sz );
    }
    ~Char();
    
    virtual bool prop2DPoll( double dt );
    virtual bool charPoll( double dt ){ return true; }
    virtual void onTouchWall( Vec2 nextloc, int hitbits, bool next_x_ok, bool next_y_ok ) {};

    // Rotate a sprite (Pixel art have to face right)
    inline void updateDefaultRightFacedRot( Vec2 v ) {
        float r = atan2(v.y,v.x);
        setRot(r);
    }
    inline bool isEnemyCategory() {
        return (category == CAT_ENEMY || category == CAT_BUILDER );
    }
    static Char *getByNetworkId( int client_id, int internal_id );
    void setNetworkId( int cliid, int intid ) { client_id = cliid; internal_id = intid; }
    bool isRemote() { return client_id; }
    bool isLocal() { return client_id==0;}

};


typedef enum {
    BEAMTYPE_NORMAL = 0,
    BEAMTYPE_BLASTER = 1,
} BEAMTYPE;

class Beam : public Char {
public:
    Vec2 v;
    BEAMTYPE type;
    int ene;
    int shooter_id;
    float hitsz;
    Beam( Vec2 lc, Vec2 at, BEAMTYPE beamt, int base_index, int ene, int shooter_id, int client_id=0, int internal_id=0 );
    virtual bool charPoll( double dt );
    void updateIndex();
    void createSparkEffect();
};

class Debri : public Char {
public:
    Vec2 v;
    bool falling_to_pit;
    float rotate_speed;
    Debri( Vec2 lc, Vec2 iniv, int index, int client_id=0, int internal_id=0 );
    Debri( Vec2 lc, int index, int client_id=0, int internal_id=0 );
    void init(int ind);
    virtual bool charPoll( double dt );
};



// Flying enemies and bullets 
class Flyer : public Char {
public:
    FLYERTYPE type;
    Vec2 v;
    float h;
    float v_h;
    float gravity;
    Prop2D *shadow_prop;
    Vec2 goal;    
    Vec2 last_loc; // Used to check reached to a goal position
    Flyer( CATEGORY cat, Vec2 lc, float h, TileDeck *dk, int ind, int client_id, int internal_id );
    virtual bool charPoll( double dt );    
    virtual bool flyerPoll( double dt){ print("flyerpoll not defined?"); return true;}
    virtual void land() {}
    inline bool gotToGoal(){
        int prevxs, prevys;
        last_loc.to(goal).toSign( &prevxs, &prevys );
        int xs,ys;
        loc.to(goal).toSign( &xs, &ys );
        if( prevxs != xs && prevys != ys ){
            return true;
        } else {
            if( absolute(v.x) <= 0.1 ){ 
                if( prevys != ys ) return true;
            } else if( absolute(v.y) <= 0.1 ){
                if( prevxs != xs ) return true;
            }
            return false;
        }
    }
};


class Blaster : public Flyer {
public:
    bool to_heal;
    int shooter_id; // Always 0 if this is from remote game servers
    Blaster( Vec2 lc, Vec2 aim, bool heal, int shooter_id, int client_id=0, int internal_id=0 );
    virtual bool flyerPoll(double dt);
    virtual void land();
};


class Flag : public Char {
public:
    bool all_cleared;
    Flag();
    virtual bool charPoll( double dt);
    void warpToNextLocation();
    void reset() { all_cleared = false; }
};


Prop2D *createShadow( Vec2 lc );
Vec2 quantizeAngle( Vec2 v, int div_num );


#endif
